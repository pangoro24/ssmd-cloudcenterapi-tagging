schemaVersion: '0.3'
description: Aplica el tag 'deleteAt' a todas las instancias EC2 y buckets S3 usando CloudControl API
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  deleteAt:
    type: String
    description: Valor del tag deleteAt
  AutomationAssumeRole:
    type: String
    description: Role que asume el documento para ejecutar acciones
mainSteps:
  - name: TagResourcesWithDeleteAt
    action: aws:executeScript
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |
        import boto3

        def script_handler(event, context):
            delete_at = event['deleteAt']
            region = boto3.session.Session().region_name
            ec2 = boto3.client('ec2', region_name=region)
            s3 = boto3.client('s3')
            cloudcontrol = boto3.client('cloudcontrol', region_name=region)

            # Obtener instancias EC2
            instance_ids = []
            reservations = ec2.describe_instances()['Reservations']
            for res in reservations:
                for inst in res['Instances']:
                    instance_ids.append(inst['InstanceId'])

            for instance_id in instance_ids:
                try:
                    cloudcontrol.update_resource(
                        TypeName='AWS::EC2::Instance',
                        Identifier=instance_id,
                        PatchDocument=[
                            {
                                'op': 'add',
                                'path': '/Tags',
                                'value': [
                                    {'Key': 'deleteAt', 'Value': delete_at}
                                ]
                            }
                        ]
                    )
                except Exception as e:
                    print(f"Error tagging EC2 instance {instance_id}: {e}")

            # Obtener buckets S3
            buckets = s3.list_buckets().get('Buckets', [])
            for bucket in buckets:
                bucket_name = bucket['Name']
                try:
                    cloudcontrol.update_resource(
                        TypeName='AWS::S3::Bucket',
                        Identifier=bucket_name,
                        PatchDocument=[
                            {
                                'op': 'add',
                                'path': '/Tags',
                                'value': [
                                    {'Key': 'deleteAt', 'Value': delete_at}
                                ]
                            }
                        ]
                    )
                except Exception as e:
                    print(f"Error tagging S3 bucket {bucket_name}: {e}")

            return {
                'tagged_ec2': instance_ids,
                'tagged_s3': [b['Name'] for b in buckets]
            }
      InputPayload:
        deleteAt: '{{ deleteAt }}'
